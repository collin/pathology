require "rake-pipeline-web-filters"
require "json"

class PathologyDocumentFilter < Rake::Pipeline::Filter
  #  NOW WE HAVE TWO PROBLEMS
  # this splits methods/documentation into two groups
  # we'll flip the order four the output
  DOC_FILTER = /((?:[ ]+#.+doc[ =].+\n)(?:[ ]+#.*\n)+)/
  def generate_output(inputs, output)
    inputs.each do |input|
      result = File.read(input.fullpath)
      result.gsub!(DOC_FILTER) do |match|
        $1.gsub!(/[ ]+(#)/) {|match| " " * (match.length - 2) }
      end
      output.write result
    end
  end
end

output "dist"
input "lib" do
  match "pathology.js" do
    concat "pathology.js"
  end
end

input "lib" do
  match "pathology.js" do
    minispade rewrite_requires: true, string: true, module_id_generator: proc { |input|
     id = input.path.dup
      id.sub!('/lib/', '/')
      id.sub!(/\.js$/, '')
      id
    }

    concat "pathology-spade.js"
  end
end

input "./src" do
  # match "pathology.coffee" do
  #   filter PathologyDocumentFilter
  #   coffee_script

  #   minispade rewrite_requires: true, string: true, module_id_generator: proc { |input|
  #    id = input.path.dup
  #     id.sub!('/lib/', '/')
  #     id.sub!(/\.js$/, '')
  #     id.sub!(/\/main$/, '')
  #     id
  #   }

  #   concat "pathology-docs-spade.js"
  # end

  match "print-docs.coffee" do
    coffee_script { "print-docs.js" }
  end
end

input "./src", "pathology-doc.coffee" do
  coffee_script
  concat "pathology-doc.js"
end

input "./test", "pathology.coffee" do
  coffee_script
  concat "pathology-test.js"
end

output "dist"
input "./", "pathology.erb" do
  require "./version"
  # f = Rake::Pipeline::Web::Filters::TiltFilter.new(version: PATHOLOGY_VERSION)
  filter(Rake::Pipeline::Web::Filters::TiltFilter, {}, Object) do |input|
    "pathology.html"
  end
end